// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package ctmap;

import "google/protobuf/timestamp.proto";
import "github.com/google/keytransparency/core/proto/signature/signature.proto";

//
// Data types
//

// MapHead is the head node of the Merkle Tree as well as additional metadata
// for the tree.
message MapHead {
  // realm is the domain identifier for the transparent map.
  string realm = 1;
  // epoch is the epoch number of this map head.
  int64 epoch = 2;
  // root is the value of the root node of the Merkle tree.
  bytes root = 3;
  // issue_time is the time when this epoch was created. Monotonically
  // increasing.
  google.protobuf.Timestamp issue_time = 4;
}

// SignedMapHead represents a signed state of the Merkel Tree.
message SignedMapHead {
  // map_head contains the head node of the Merkle Tree along with other
  // metadata.
  MapHead map_head = 1;
  // signatures is a set of map_head signatures. Each signature is identified by
  // the first 64 bits of the public key that verifies it.
  map<string, signature.DigitallySigned> signatures = 2;
}

//
// Request / Response types
//

// GetLeafRequest for a verifiable map leaf.
message GetLeafRequest {
  // index includes the requested leaf index.
  bytes index = 1;
  // epoch contains the epoch at which the leaf is requested.
  uint64 epoch = 2;
}

// GetLeafResponse for a verifiable map leaf.
message GetLeafResponse {
  // leaf_data contains an entry stored in the leaf node.
  bytes leaf_data = 1;
  // neighbors is a list of all the adjacent nodes along the path
  // from the deepest node to the head.
  repeated bytes neighbors = 2;
}

// UpdateLeafRequest submits a change for the value at index.
message UpdateLeafRequest {
  // index includes the updated leaf index.
  bytes index = 1;
  // mutation contains the actual update.
  bytes mutation = 2;
}

// UpdateLeafResponse returns the current value of index.
message UpdateLeafResponse {
  // proof contains a proof that the update is accepted and processed.
  GetLeafResponse proof = 1;
}

// MutationEntry is either a mutation or an epoch advancement.
message MutationEntry {
  // type specifies the entry mutation type.
  oneof type {
    // update contains the leaf update request.
    UpdateLeafRequest update = 1;
    // advance_epoch indicates whether the mutation should advance the epoch.
    bool advance_epoch = 2;
  }
}
