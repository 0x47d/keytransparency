// Code generated by protoc-gen-go.
// source: proto/google_security_e2ekeys_core/core.proto
// DO NOT EDIT!

/*
Package google_security_e2ekeys_core is a generated protocol buffer package.

It is generated from these files:
	proto/google_security_e2ekeys_core/core.proto

It has these top-level messages:
	EntryStorage
	EpochInfo
	DomainInfo
	VerifierInfo
*/
package google_security_e2ekeys_core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import security_ctmap "github.com/google/e2e-key-server/proto/security_ctmap"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// EntryStorage is what gets serialized to disk / log.
type EntryStorage struct {
	// commitment_timestamp is a sequential update number of the SignedEntryUpdate.
	CommitmentTimestamp int64 `protobuf:"varint,1,opt,name=commitment_timestamp,json=commitmentTimestamp" json:"commitment_timestamp,omitempty"`
	// entry_update contains a SignedEntryUpdate proto with the actual update
	// contents.
	SignedEntryUpdate *security_ctmap.SignedEntryUpdate `protobuf:"bytes,2,opt,name=signed_entry_update,json=signedEntryUpdate" json:"signed_entry_update,omitempty"`
	// profile is the serialized protobuf Profile.
	// profile is private and must not be released to verifiers.
	Profile []byte `protobuf:"bytes,3,opt,name=profile,proto3" json:"profile,omitempty"`
	// commitment_key is at least 16 random bytes.
	CommitmentKey []byte `protobuf:"bytes,4,opt,name=commitment_key,json=commitmentKey,proto3" json:"commitment_key,omitempty"`
	// domain allows servers to keep track of multiple trees at once.
	Domain string `protobuf:"bytes,5,opt,name=domain" json:"domain,omitempty"`
}

func (m *EntryStorage) Reset()                    { *m = EntryStorage{} }
func (m *EntryStorage) String() string            { return proto.CompactTextString(m) }
func (*EntryStorage) ProtoMessage()               {}
func (*EntryStorage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EntryStorage) GetSignedEntryUpdate() *security_ctmap.SignedEntryUpdate {
	if m != nil {
		return m.SignedEntryUpdate
	}
	return nil
}

// EpochInfo is what gets serialized to disk / log.
type EpochInfo struct {
	// signed_epoch_head is the signed epoch head of the created epoch.
	SignedEpochHead *security_ctmap.SignedEpochHead `protobuf:"bytes,1,opt,name=signed_epoch_head,json=signedEpochHead" json:"signed_epoch_head,omitempty"`
	// last_commitment_timestamp is the timestamp of the last update included in
	// created epoch.
	LastCommitmentTimestamp int64 `protobuf:"varint,2,opt,name=last_commitment_timestamp,json=lastCommitmentTimestamp" json:"last_commitment_timestamp,omitempty"`
}

func (m *EpochInfo) Reset()                    { *m = EpochInfo{} }
func (m *EpochInfo) String() string            { return proto.CompactTextString(m) }
func (*EpochInfo) ProtoMessage()               {}
func (*EpochInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EpochInfo) GetSignedEpochHead() *security_ctmap.SignedEpochHead {
	if m != nil {
		return m.SignedEpochHead
	}
	return nil
}

// DomainInfo is the information that need to be baked into an application
// in order to verify information for a domain.
type DomainInfo struct {
	PublicKeys []*security_ctmap.PublicKey `protobuf:"bytes,1,rep,name=public_keys,json=publicKeys" json:"public_keys,omitempty"`
	// required_sigs is the number of valid signatures to require out of
	// public_keys before considering signed_tree heads legitimate.
	RequiredSigs uint32 `protobuf:"varint,2,opt,name=required_sigs,json=requiredSigs" json:"required_sigs,omitempty"`
	// domain is the doman suffix to use when resolving a user_id to a domain.
	Domain string `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
	// api_url is the url prefix to use when querying users on this domain.
	ApiUrl string `protobuf:"bytes,4,opt,name=api_url,json=apiUrl" json:"api_url,omitempty"`
}

func (m *DomainInfo) Reset()                    { *m = DomainInfo{} }
func (m *DomainInfo) String() string            { return proto.CompactTextString(m) }
func (*DomainInfo) ProtoMessage()               {}
func (*DomainInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DomainInfo) GetPublicKeys() []*security_ctmap.PublicKey {
	if m != nil {
		return m.PublicKeys
	}
	return nil
}

type VerifierInfo struct {
	PublicKeys []*security_ctmap.PublicKey `protobuf:"bytes,1,rep,name=public_keys,json=publicKeys" json:"public_keys,omitempty"`
	// required_sigs is the number of valid signatures to require out of
	// public_keys before considering signed_tree heads legitimate.
	RequiredSigs uint32 `protobuf:"varint,2,opt,name=required_sigs,json=requiredSigs" json:"required_sigs,omitempty"`
	// api_url is the url prefix to use when querying users on this domain.
	ApiUrl string `protobuf:"bytes,4,opt,name=api_url,json=apiUrl" json:"api_url,omitempty"`
	// domain is the doman suffix that this verifier is responsible for.
	Domain string `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
}

func (m *VerifierInfo) Reset()                    { *m = VerifierInfo{} }
func (m *VerifierInfo) String() string            { return proto.CompactTextString(m) }
func (*VerifierInfo) ProtoMessage()               {}
func (*VerifierInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *VerifierInfo) GetPublicKeys() []*security_ctmap.PublicKey {
	if m != nil {
		return m.PublicKeys
	}
	return nil
}

func init() {
	proto.RegisterType((*EntryStorage)(nil), "google.security.e2ekeys.core.EntryStorage")
	proto.RegisterType((*EpochInfo)(nil), "google.security.e2ekeys.core.EpochInfo")
	proto.RegisterType((*DomainInfo)(nil), "google.security.e2ekeys.core.DomainInfo")
	proto.RegisterType((*VerifierInfo)(nil), "google.security.e2ekeys.core.VerifierInfo")
}

var fileDescriptor0 = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x40, 0xe5, 0x1a, 0x5a, 0x75, 0x92, 0x80, 0xba, 0x45, 0xd4, 0x45, 0x48, 0x80, 0x11, 0x12,
	0x97, 0xd8, 0x22, 0xdc, 0x7a, 0xe1, 0x00, 0x95, 0x40, 0xbd, 0x80, 0x4b, 0xb9, 0xae, 0x36, 0xf6,
	0xc4, 0x59, 0x61, 0x7b, 0x97, 0xdd, 0x35, 0x92, 0xff, 0x83, 0x33, 0xe2, 0x07, 0xf9, 0x07, 0xc6,
	0x9b, 0x98, 0xa6, 0x81, 0x5c, 0x7b, 0x48, 0x94, 0x99, 0x79, 0x99, 0x79, 0x33, 0x5a, 0x98, 0x6a,
	0xa3, 0x9c, 0x4a, 0x4b, 0xa5, 0xca, 0x0a, 0xb9, 0xc5, 0xbc, 0x35, 0xd2, 0x75, 0x1c, 0x67, 0xf8,
	0x15, 0x3b, 0xcb, 0x73, 0x65, 0x30, 0xed, 0xbf, 0x12, 0xcf, 0xb1, 0xc7, 0x2b, 0x30, 0x19, 0xc0,
	0x64, 0x0d, 0x26, 0x3d, 0xf3, 0xe8, 0x4d, 0x29, 0xdd, 0xb2, 0x9d, 0x53, 0x50, 0xaf, 0x3b, 0xa6,
	0x54, 0x9f, 0x12, 0x30, 0xb5, 0x68, 0xbe, 0xa3, 0x49, 0x57, 0xd3, 0xfe, 0x8e, 0xc9, 0x5d, 0x2d,
	0x74, 0x4a, 0x9f, 0x55, 0xfb, 0xf8, 0x77, 0x00, 0xe3, 0xf3, 0xc6, 0x99, 0xee, 0xd2, 0x29, 0x23,
	0x4a, 0x64, 0xaf, 0xe0, 0x01, 0x35, 0xab, 0xa5, 0xab, 0xb1, 0x71, 0xdc, 0xc9, 0x1a, 0xad, 0x13,
	0xb5, 0x8e, 0x82, 0xa7, 0xc1, 0xcb, 0x30, 0x3b, 0xbe, 0xae, 0x7d, 0x1e, 0x4a, 0xec, 0x13, 0x1c,
	0x5b, 0x59, 0x36, 0x58, 0x70, 0xec, 0x3b, 0xf1, 0x56, 0x17, 0xc2, 0x61, 0xb4, 0x47, 0xff, 0x18,
	0xcd, 0x9e, 0x25, 0x37, 0x67, 0x27, 0x97, 0x1e, 0xf5, 0x33, 0xaf, 0x3c, 0x98, 0x1d, 0xd9, 0xed,
	0x14, 0x8b, 0xe0, 0x80, 0xfc, 0x16, 0xb2, 0xc2, 0x28, 0xa4, 0x36, 0xe3, 0x6c, 0x08, 0xd9, 0x0b,
	0xb8, 0xb7, 0xe1, 0x47, 0x8b, 0x46, 0x77, 0x3c, 0x30, 0xb9, 0xce, 0x5e, 0x60, 0xc7, 0x1e, 0xc2,
	0x7e, 0xa1, 0x6a, 0x21, 0x9b, 0xe8, 0x2e, 0x95, 0x0f, 0xb3, 0x75, 0x14, 0xff, 0x08, 0xe0, 0xf0,
	0x5c, 0xab, 0x7c, 0xf9, 0xa1, 0x59, 0x28, 0x76, 0x01, 0x47, 0x83, 0x79, 0x9f, 0xe3, 0x4b, 0x14,
	0x85, 0xdf, 0x74, 0x34, 0x7b, 0xb2, 0xc3, 0xbb, 0xe7, 0xde, 0x13, 0x96, 0xdd, 0xb7, 0x37, 0x13,
	0xec, 0x0c, 0x4e, 0x2b, 0x61, 0x1d, 0xff, 0xef, 0xf9, 0xf6, 0xfc, 0xf9, 0x4e, 0x7a, 0xe0, 0xed,
	0xbf, 0x27, 0x8c, 0x7f, 0x06, 0x00, 0xef, 0xbc, 0xa1, 0xf7, 0x3a, 0x83, 0x91, 0x6e, 0xe7, 0x95,
	0xcc, 0xfb, 0x05, 0x2d, 0x19, 0x85, 0x64, 0x74, 0xba, 0x6d, 0xf4, 0xd1, 0x23, 0xb4, 0x6d, 0x06,
	0x7a, 0xf8, 0x69, 0xd9, 0x73, 0x98, 0x18, 0xfc, 0xd6, 0x4a, 0x43, 0x5b, 0x91, 0xa2, 0xf5, 0xa3,
	0x27, 0xd9, 0x78, 0x48, 0xd2, 0x1e, 0x76, 0xe3, 0x3c, 0xe1, 0xe6, 0x79, 0xd8, 0x09, 0x1c, 0x08,
	0x2d, 0x79, 0x6b, 0x2a, 0x7f, 0x56, 0x2a, 0x50, 0x78, 0x65, 0xaa, 0xf8, 0x17, 0xbd, 0x93, 0x2f,
	0x68, 0xe4, 0x42, 0xa2, 0xb9, 0x1d, 0xc5, 0x5d, 0x2a, 0xbb, 0xdc, 0xe7, 0xfb, 0xfe, 0x45, 0xbf,
	0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x5d, 0x3d, 0x06, 0x61, 0x03, 0x00, 0x00,
}
